<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on Just my blog</title>
    <link>http://iryndin.net/tags/database/</link>
    <description>Recent content in Database on Just my blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Dec 2017 16:14:52 +0300</lastBuildDate>
    
	<atom:link href="http://iryndin.net/tags/database/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Optimistic and pessimistic concurrency control</title>
      <link>http://iryndin.net/post/optimistic_and_pessimistic_concurrency_control/</link>
      <pubDate>Mon, 04 Dec 2017 16:14:52 +0300</pubDate>
      
      <guid>http://iryndin.net/post/optimistic_and_pessimistic_concurrency_control/</guid>
      <description>Transactional isolation is usually implemented by locking whatever is accessed in a transaction. There are two different approaches to transactional locking:
 Pessimistic locking Optimistic locking  Pessimistic concurrency control (locking) Pessimistic locking is called &amp;ldquo;pessimistic&amp;rdquo; because the system assumes the worst â€” it assumes that two or more users will want to update the same record at the same time, and then prevents that possibility by locking the record, no matter how unlikely conflicts actually are.</description>
    </item>
    
    <item>
      <title>PostgreSQL transaction isolation levels</title>
      <link>http://iryndin.net/post/postgresql_transaction_isolation_levels/</link>
      <pubDate>Tue, 28 Nov 2017 09:59:58 +0300</pubDate>
      
      <guid>http://iryndin.net/post/postgresql_transaction_isolation_levels/</guid>
      <description>On previous post about transaction isolation levels we considered what is transaction isolation level and how this influence the result we get from transaction. But from database to database details are diferent, so let&amp;rsquo;s consider transaction isolation details for PostgreSQL.
Let&amp;rsquo;s again repeat a little bit about transaction islolation level. The SQL standard defines four levels of transaction isolation. The most strict is Serializable, which is defined by the standard in a paragraph which says that any concurrent execution of a set of Serializable transactions is guaranteed to produce the same effect as running them one at a time in some order.</description>
    </item>
    
    <item>
      <title>Transaction isolation levels</title>
      <link>http://iryndin.net/post/transaction_isolation_levels/</link>
      <pubDate>Tue, 28 Nov 2017 07:14:59 +0300</pubDate>
      
      <guid>http://iryndin.net/post/transaction_isolation_levels/</guid>
      <description>Let&amp;rsquo;s speak about transaction isolation levels.
ANSI/SQL standard isolation levels We have 4 standard-defined transaction isolation levels:
 Read uncommited. Dirty reads - YES, Non-Repeatable reads - YES, Phantom reads - YES. Read commited. Dirty reads - NO, Non-Repeatable reads - YES, Phantom reads - YES. Repeatable read. Dirty reads - NO, Non-Repeatable reads - NO, Phantom reads - YES. Serializable. Dirty reads - NO, Non-Repeatable reads - NO, Phantom reads - NO.</description>
    </item>
    
  </channel>
</rss>