<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on Just my blog</title>
    <link>http://iryndin.net/tags/spring/</link>
    <description>Recent content in Spring on Just my blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Nov 2017 18:53:22 +0300</lastBuildDate>
    
	<atom:link href="http://iryndin.net/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring: destroy prototype beans</title>
      <link>http://iryndin.net/post/spring_destroy_prototype_beans/</link>
      <pubDate>Mon, 27 Nov 2017 18:53:22 +0300</pubDate>
      
      <guid>http://iryndin.net/post/spring_destroy_prototype_beans/</guid>
      <description>In previos post (Spring Bean PostProcessors) we considered some trivial examples of using BeanPostProcessor. Now let&amp;rsquo;s consider more interesting case - destruction of prototype-scoped beans. The reason for this is that Spring does not manage desctruction phase of prototype-scoped beans, as it is mentioned in the docs: 7.5.2 The prototype scope:
 In contrast to the other scopes, Spring does not manage the complete lifecycle of a prototype bean: the container instantiates, configures, and otherwise assembles a prototype object, and hands it to the client, with no further record of that prototype instance.</description>
    </item>
    
    <item>
      <title>Spring Bean PostProcessors</title>
      <link>http://iryndin.net/post/spring_beanpostprocessors/</link>
      <pubDate>Mon, 27 Nov 2017 15:45:43 +0300</pubDate>
      
      <guid>http://iryndin.net/post/spring_beanpostprocessors/</guid>
      <description>Let&amp;rsquo;s speak about Bean PostProcessors in Spring Framework.
The BeanPostProcessor interface defines callback methods that you can implement to provide your own (or override the containerâ€™s default) instantiation logic, dependency-resolution logic, and so forth. In Spring Framework Reference you can read about Bean PostProcessors in more details here: 7.8.1 Customizing beans using a BeanPostProcessor.
Shortly, you can use BeanPostProcessor for various initialization actions, as well as destroying actions, do some smart init/destroy actions en masse etc.</description>
    </item>
    
  </channel>
</rss>