<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on Just my blog</title>
    <link>http://iryndin.net/tags/spring/</link>
    <description>Recent content in Spring on Just my blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Nov 2017 18:53:22 +0300</lastBuildDate>
    
	<atom:link href="http://iryndin.net/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring: destroy prototype beans</title>
      <link>http://iryndin.net/post/spring_destroy_prototype_beans/</link>
      <pubDate>Mon, 27 Nov 2017 18:53:22 +0300</pubDate>
      
      <guid>http://iryndin.net/post/spring_destroy_prototype_beans/</guid>
      <description>&lt;p&gt;Prototype-scoped beans destruction is not managed by Spring container (only construction is managed).
But we can manage it ourselves with Spring &lt;code&gt;BeanPostProcessor&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring Bean PostProcessors</title>
      <link>http://iryndin.net/post/spring_beanpostprocessors/</link>
      <pubDate>Mon, 27 Nov 2017 15:45:43 +0300</pubDate>
      
      <guid>http://iryndin.net/post/spring_beanpostprocessors/</guid>
      <description>&lt;p&gt;Spring &lt;code&gt;BeanPostProcessor&lt;/code&gt; is a nice feature that gives you much power into hands.
You can do a lot of fun things with &lt;code&gt;BeanPostProcessor&lt;/code&gt;s, and this post demonstrates some of them with a series of short examples.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>